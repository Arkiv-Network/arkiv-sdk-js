name: Tests

on:
  push:
    branches: [main, master, v1-dev]
  pull_request:
    branches: [main, master, v1-dev]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run lint
        run: bun run lint

  unit-tests:
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run unit tests
        run: bun test src/**/*

  component-tests:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build package for tests
        run: bun run package:test

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: arkiv-package
          path: arkiv-network-sdk-latest.tgz
          retention-days: 30

      - name: Install test dependencies
        run: cd test && bun install

      - name: Pull GolemDB Docker image
        run: docker pull golemnetwork/golembase-op-geth:latest

      # Using a test private key (randomly generated for testing purposes only)
      - name: Run component tests
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
          PRIVATE_KEY: "0x049f4de101c81033ab95e057fa3535c131b1da022a1922cd175cf6b63d263892"
        run: cd test && bun test\

  publish:
    runs-on: ubuntu-latest
    needs: [component-tests]
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@golem.network"

      - name: Run publish to dev
        if: github.ref == 'refs/heads/v1-dev'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "=== Publishing package ==="
          # Capture both stdout and stderr
          git status -s
          if ! bun run publish-dev 2>&1; then
            echo "=== PUBLISH FAILED ==="
            echo "Exit code: $?"
            echo "=== Full output (stdout + stderr) ==="
            exit 1
          fi

      - name: Run publish to main
        if: github.ref == 'refs/heads/main'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "=== Publishing package ==="
          # Capture both stdout and stderr
          if ! bun run publish-main 2>&1; then
            echo "=== PUBLISH FAILED ==="
            echo "Exit code: $?"
            echo "=== Full output (stdout + stderr) ==="
            exit 1
          fi
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
